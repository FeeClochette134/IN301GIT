///// Sequence.c
#include <stdlib.h>
#include <stdio.h>
#include "sequence.h"

SEQUENCE *creer_seq() {
	SEQUENCE *S ;
	S = malloc(sizeof(SEQUENCE)) ;
	S->deb = NULL ;
	S->fin = NULL ;
	return S ;
}

int sequence_vide(SEQUENCE *S) {
	if(S==NULL) return 1 ;
	if(S->deb == NULL && S->fin == NULL) return 1 ;
	return 0 ;
}

void affiche_seq(SEQUENCE *S) {
	if (sequence_vide(S))	{
		printf("La sequence est vide\n");
	}
	else	{
		AA *a = S->deb;
		while (a->suiv != NULL)	{
			printf("%c",a->aa);
			a = a->suiv;
		}
		printf("%c\n",a->aa);
	}
}


SEQUENCE *inserer_deb(SEQUENCE *S,char acgt) {
	AA *acide = malloc(sizeof(AA)) ;
	// Si la séquence était vide
	if(sequence_vide(S)) {
		acide->aa = acgt ;
		acide->prec = NULL ;
		acide->suiv = NULL ;
		S->deb = acide ;
		S->fin = acide ;
		return S ;
	}
	// Si la séquence n'était pas vide
	acide->aa = acgt ;
	acide->prec = NULL ;
	acide->suiv = S->deb ;
	S->deb->prec = acide ;
	S->deb = acide ;
	return S ;
}



/*

SEQUENCE *lecture(FILE *F) {
	if(F==NULL) {
		printf("erreur ouverture fichier\n") ;
		exit(2) ;
	}
	char i = fgetc(F) ; // Le caractère qui est lu
	SEQUENCE *S = creer_seq() ;
	
	
	while(i!=EOF) {
		
	}
}

*/



//////////// Sequence.h
#include <stdlib.h>
#include <stdio.h>

struct acide_amine {
	char aa ; // Correspond à l'acide aminé à cet position
	struct acide_amine *prec ;	// Pointeur vers l'acide aminé précédent
	struct acide_amine *suiv ;	// Pointeur vers l'acide aminé suivant
	
} ;
typedef struct acide_amine AA ;

struct sequence {
	struct acide_amine *deb ;	// Pointeur sur le début de la séquence d'AA
	struct acide_amine *fin ;	// Pointeur sur la fin de la séquence d'AA
} ;
typedef struct sequence SEQUENCE ;

//////////////////// Manipulation de sequences
SEQUENCE *creer_seq() ;
int sequence_vide(SEQUENCE *S) ;
void affiche_seq(SEQUENCE *S) ;
SEQUENCE *inserer_deb(SEQUENCE *S,char acgt) ;






// Lire un fichier
SEQUENCE *lecture(FILE *F) ;
SEQUENCE *insertion_fin(SEQUENCE *S) ;





/////////// distance.c
#include <stdlib.h>
#include <stdio.h>
#include "distance.h"





/////// distance.h
include <stdlib.h>
#include <stdio.h>

struct distance {
	
} ;
typedef struct distance DISTANCE ;




////// main1.c
#include <stdlib.h>
#include <stdio.h>
#include "sequence.h"
#include "distance.h"

int main(int argc,char **argv) {
	SEQUENCE *S = creer_seq() ;
	S = inserer_deb(S,'A') ;
	S = inserer_deb(S,'G') ;
	S = inserer_deb(S,'C') ;
	affiche_seq(S) ;
	
	
	
	exit(0) ;
}









///////// Makefile


partie1 : main1
	./main1

main1 : sequence.o distance.o main1.o
	gcc -Wall -o main1 sequence.o distance.o main1.o

sequence.o : sequence.c sequence.h
	gcc -Wall -c sequence.c

distance.o : distance.c distance.h
	gcc -Wall -c distance.c

main1.o : main1.c sequence.h distance.h
	gcc -Wall -c main1.c






/////// sequence.c
#include <stdlib.h>
#include <stdio.h>
#include "sequence.h"

SEQUENCE *creer_seq() {
	SEQUENCE *S ;
	S = malloc(sizeof(SEQUENCE)) ;
	S->deb = NULL ;
	S->fin = NULL ;
	return S ;
}

int sequence_vide(SEQUENCE *S) {
	if(S==NULL) return 1 ;
	if(S->deb == NULL && S->fin == NULL) return 1 ;
	return 0 ;
}

void affiche_seq(SEQUENCE *S) {
	if (sequence_vide(S))	{
		printf("La sequence est vide\n");
	}
	else	{
		AA *a = S->deb;
		while (a->suiv != NULL)	{
			printf("%c",a->aa);
			a = a->suiv;
		}
		printf("%c\n",a->aa);
	}
}


SEQUENCE *inserer_deb(SEQUENCE *S,char acgt) {
	AA *acide = malloc(sizeof(AA)) ;
	// Si la séquence était vide
	if(sequence_vide(S)) {
		acide->aa = acgt ;
		acide->prec = NULL ;
		acide->suiv = NULL ;
		S->deb = acide ;
		S->fin = acide ;
		return S ;
	}
	// Si la séquence n'était pas vide
	acide->aa = acgt ;
	acide->prec = NULL ;
	acide->suiv = S->deb ;
	S->deb->prec = acide ;
	S->deb = acide ;
	return S ;
}



/*

SEQUENCE *lecture(FILE *F) {
	if(F==NULL) {
		printf("erreur ouverture fichier\n") ;
		exit(2) ;
	}
	char i = fgetc(F) ; // Le caractère qui est lu
	SEQUENCE *S = creer_seq() ;
	
	
	while(i!=EOF) {
		
	}
}

*/

